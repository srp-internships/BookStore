@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using IdentityService.IntegrationEvents.SellerEvents
@using MassTransit
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using IdentityService.Data

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IBus Bus

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
	<div class="col-md-4">
		<StatusMessage Message="@Message" />
		<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
			<DataAnnotationsValidator />
			<hr />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.FirstName" class="form-control" aria-required="true" placeholder="First Name" />
				<label for="first-name">First Name</label>
				<ValidationMessage For="() => Input.FirstName" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.LastName" class="form-control" aria-required="true" placeholder="Last Name" />
				<label for="last-name">Last Name</label>
				<ValidationMessage For="() => Input.LastName" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
				<label for="email">Email</label>
				<ValidationMessage For="() => Input.Email" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="password">Password</label>
				<ValidationMessage For="() => Input.Password" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
				<label for="confirm-password">Confirm Password</label>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputSelect @bind-Value="Input.Role" class="form-control">
					<option value="">Select Role</option>
					<option value="@Role.Seller">I am Seller</option>
					<option value="@Role.Customer">I am Customer</option>
				</InputSelect>
				<label for="role">Role</label>
				<ValidationMessage For="() => Input.Role" class="text-danger" />
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
		</EditForm>
	</div>
</div>

@code {
	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	public async Task RegisterUser(EditContext editContext)
	{
		var user = new User
			{
				FirstName = Input.FirstName,
				LastName = Input.LastName
			};

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;
			return;
		}

		Logger.LogInformation("User created a new account with password.");

		// Assign role to the user
		if (!string.IsNullOrEmpty(Input.Role))
		{
			var roleResult = await UserManager.AddToRoleAsync(user, Input.Role);
			if (!roleResult.Succeeded)
			{
				identityErrors = roleResult.Errors;
				return;
			}
		}

		await SendConfirmationEmailAsync(user);

		await PublishUserCreatedEvent(user, Input.Role);

		RedirectManager.RedirectTo(
				"/Account/Login",
				new() { ["ReturnUrl"] = ReturnUrl });
	}

	private async Task SendConfirmationEmailAsync(User user)
	{
		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
	}

	private IUserEmailStore<User> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}
		return (IUserEmailStore<User>)UserStore;
	}

	private Task PublishUserCreatedEvent(User user, string role)
	{
		if (role == Role.Seller)
			return Bus.Publish(new SellerCreatedIntegrationEvent
				{
					Id = Guid.NewGuid(),
					OccuredOnUtc = DateTime.UtcNow,
					SellerId = user.Id,
					FirstName = user.FirstName,
					LastName = user.LastName,
				});
		else
			return Task.CompletedTask;
	}

	private sealed class InputModel
	{
		[Required]
		[Display(Name = "First Name")]
		public string FirstName { get; set; } = "";

		[Required]
		[Display(Name = "Last Name")]
		public string LastName { get; set; } = "";

		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

		[Required]
		[Display(Name = "Role")]
		public string Role { get; set; } = "";
	}
}
